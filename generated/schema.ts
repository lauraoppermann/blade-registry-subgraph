// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class App extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("appID", Value.fromBytes(Bytes.empty()));
    this.set("appName", Value.fromString(""));
    this.set("appURL", Value.fromString(""));
    this.set("appVersionID", Value.fromBytes(Bytes.empty()));
    this.set("appOwnerID", Value.fromBytes(Bytes.empty()));

  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save App entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save App entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("App", id.toString(), this);
    }
  }

  static load(id: string): App | null {
    return changetype<App | null>(store.get("App", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get appID(): Bytes {
    let value = this.get("appID");
    return value!.toBytes();
  }

  set appID(value: Bytes) {
    this.set("appID", Value.fromBytes(value));
  }

  get appName(): string {
    let value = this.get("appName");
    return value!.toString();
  }

  set appName(value: string) {
    this.set("appName", Value.fromString(value));
  }
  get appURL(): string {
    let value = this.get("appURL");
    return value!.toString();
  }

  set appURL(value: string) {
    this.set("appURL", Value.fromString(value));
  }

  get appVerionID(): Bytes {
    let value = this.get("appVersionID");
    return value!.toBytes();
  }

  set appVersionID(value: Bytes) {
    this.set("appVersionID", Value.fromBytes(value));
  }

  get appOwnerID(): Bytes {
    let value = this.get("appID");
    return value!.toBytes();
  }

  set appOwnerID(value: Bytes) {
    this.set("appID", Value.fromBytes(value));
  }

}
